#!/usr/bin/env perl -w

##############################################################################
# File   : 
# Author : Guillaume-Jean Herbiet  <guillaume-jean@herbiet.net>
#
#
# Copyright (c) 2012 Guillaume-Jean Herbiet     (http://herbiet.net)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Guillaume-Jean Herbiet
# <guillaume-jean@herbiet.net>
#
##############################################################################
my $VERSION = "0.1";				# Version of this script

use strict;
use warnings;

#-----------------------------------------------------------------------------
# Load aditional packages
#
use Getopt::Long;					# To easily retrieve arguments from command-line
use Term::ANSIColor qw(:constants);	# Colored output for the terminal

use Cisco::Hash qw(decrypt encrypt);# Cisco hash functions

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Log and debug
#
sub say 	{ local $\ = "\n"; print @_; } 
sub ohai	{ say BOLD, BLUE,	"==> ", RESET, @_; }
sub oops	{ say BOLD, YELLOW,	"/!\\ ",RESET, @_; }
sub fail	{ say BOLD, RED,	"!!! ", RESET, @_; }

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Global variables
#
my %OPTIONS;						# Hash of passed options
my $OPTIONS_VALID;					# Are the passed options valid ?
my @ARGS = @ARGV;					# Array of passed options
my $COMMAND = `basename $0`;		# Name of the script
chomp($COMMAND);

#
# Generic variables
#
my $VERBOSE = 0;					# Verbose mode
my $DEBUG = 0;						# Debug mode

#
# Script specific variables
#
my $ENCRYPT = 0;
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Get passed arguments and check for validity.
#
$OPTIONS_VALID = GetOptions(
	\%OPTIONS,
	'help|h'	 => sub { USAGE(); },
	'version'	 => sub { VERSION_MESSAGE(); },
	'verbose|v+' => \$VERBOSE,
	'debug|d'	 => sub { $VERBOSE = 1; $DEBUG = 1; },
	'encrypt|e+' => \$ENCRYPT
);

unless ($OPTIONS_VALID && scalar @ARGV > 0) {
	fail "Error in arguments.";
	USAGE(1);
}

sub USAGE {
	my $exitval = defined($_) ? $_ : 0;
	print <<EOF;
$COMMAND [-h|--help] [--version] [-v|--verbose] [-d|--debug] [-e|--encrypt]
    STRING [STRING_2 ... STRING_N]

  Dectypts or encrypts given STRING(S) as Cisco password 7.

    --help, -h          : Print this help, then exit
    --version           : Print the script version, then exit

    --verbose, -v       : Verbose output
    --debug, -d         : Debug output

    --encrypt, -e       : Encrypt strings instead of decrypting
EOF
	exit $exitval;
}

sub VERSION_MESSAGE {
	say "This is ", BOLD, "$COMMAND", RESET, " v$VERSION.";
	print <<EOF;
Copyright (c) 2012 Guillaume-Jean Herbiet  (http://herbiet.net)
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
	exit 0;
}
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Core code
#
ohai "Encrypt mode set." if $VERBOSE && $ENCRYPT;
ohai "Decrypt mode set" if $VERBOSE && !$ENCRYPT;

ohai "Starting cryptographic operations" if $VERBOSE;
foreach my $string (@ARGV) {
	if ($ENCRYPT) {
		say "Encrypting \"$string\":" if $DEBUG;
		print "$string : " if (scalar @ARGV > 2);
		say encrypt($string, 15);
	}
	else {
		say "Decrypting \"$string\":" if $DEBUG;
		print "$string : " if (scalar @ARGV > 2);
		say decrypt($string, 15);
	}
}
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Additional functions
#

#-----------------------------------------------------------------------------
